version: '3'

networks:
  runway_network:
    driver: bridge

services:
  app:
    build: .
    # restart: always
    container_name: gunicorn
    command: gunicorn Runway_backend.wsgi --bind 0.0.0.0:8000
    ports:
      - "8000:8000"
    volumes:
      # - .:/app
      - static_volume:/app/static
      - media_volume:/app/media
    env_file:
      - ./Runway_backend/.env
    networks:
      - runway_network
    depends_on:
      - db
    # healthcheck:
    #   test: ["CMD", "curl", "--fail", "http://localhost:8000/healthcheck"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 3


  db:
    image: postgis/postgis
    # restart: always
    container_name: postgis
    environment:
      - POSTGRES_USER=nihal
      - POSTGRES_PASSWORD=nihal
      - POSTGRES_DB=runway
      # - POSTGRES_PORT= DB_PORT  
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:  
      - "5432:5432"
    networks:
      - runway_network

  socket:
    build: .
    container_name: daphne
    command: daphne -b 0.0.0.0 -p 8001 Runway_backend.asgi:application
    ports:
      - "8001:8001"
    env_file:
      - Runway_backend/.env
    depends_on:
      - db
      - redis
    networks:
      - runway_network

  redis:
    image: redis
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - runway_network

  celery:
    build: .
    # restart: always
    container_name: celery_worker
    command: celery -A Runway_backend worker --loglevel=info
    depends_on:
      - db
      - redis
    networks:
      - runway_network

  celery-beat:
    build: .
    # restart: always
    container_name: celery_beat
    command: celery -A Runway_backend beat --loglevel=info
    depends_on:
      - db
      - redis
      - celery
      # - migrate
    networks:
      - runway_network


  nginx:
    build: ./nginx
    container_name: nginx
    # restart: always
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
    ports:
      - "80:80"
    depends_on:
      - app
      - socket
    networks:
      - runway_network
volumes:
  postgres_data:
  static_volume:
  media_volume:
# volume:
#   - type: bind
#     source: D:\Runway\Runway_backend\data\postgresql
#     target: /var/lib/postgres
#     bind:
#       create_host_path: true
  # volumes:
  #   - .:/app/static

  # migrate:
  #   build: .
  #   command: python manage.py migrate
  #   env_file:
  #     - Runway_backend/.env
  #   depends_on:
  #     - db
  #   networks:
  #     - runway_network
  # superuser:
  #   build: .
  #   command: python manage.py createsuperuser
  #   env_file:
  #     - Runway_backend/.env
  #   depends_on:
  #     - db
  #   networks:
  #     - runway_network
